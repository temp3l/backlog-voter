{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "srebien@assona.net"
    },
    "description": "This is a sample Assonajs server.  You can find out more about     Swagger at [http://assona.io/wiki](http://assona.io/wiki)",
    "title": "Templates API",
    "version": "0.0.1"
  },
  "host": "localhost:3003",
  "basePath": "/",
  "schemes": ["http"],
  "paths": {
    "/templates": {
      "get": {
        "produces": ["application/json"],
        "parameters": [
          {
            "description": "The number of items to skip before starting to collect the result set.",
            "in": "query",
            "minimum": 0,
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The numbers of items to return.",
            "in": "query",
            "maximum": 50,
            "minimum": 1,
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of templates",
            "schema": {
              "items": {
                "$ref": "#/definitions/TemplateRead"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "General Error Response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": ["templates"],
        "operationId": "listTemplates",
        "summary": "Get a list of templates",
        "x-controller": "templates",
        "x-operation": "findAll"
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TemplatePost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created successfully",
            "schema": {
              "$ref": "#/definitions/TemplateRead"
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "default": {
            "description": "General Error Response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": ["templates"],
        "description": "create a new template",
        "operationId": "createTemplate",
        "summary": "Create a templateId",
        "x-controller": "templates",
        "x-operation": "create"
      }
    },
    "/test/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The template identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "deleted successfullllly"
          },
          "404": {
            "description": "The todo does not exist."
          }
        },
        "tags": ["templates"],
        "description": "Delete the template",
        "operationId": "deleteTemplate",
        "summary": "Delete the template",
        "x-controller": "templates",
        "x-operation": "delete"
      },
      "put": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "description": "The template identifier",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "number"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TemplatePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TemplateRead"
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "General Error Response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": ["templates"],
        "description": "Update the template title and status",
        "operationId": "updateTemplate",
        "summary": "Update the template",
        "x-controller": "templates",
        "x-operation": "update"
      }
    }
  },
  "definitions": {
    "Error": {
      "properties": {
        "code": {
          "type": "number"
        },
        "message": {
          "type": "string"
        }
      },
      "required": ["code", "message"],
      "type": "object"
    },
    "TemplatePost": {
      "properties": {
        "name": {
          "example": "fooo",
          "type": "string"
        },
        "note": {
          "example": "bar",
          "type": "string"
        },
        "status": {
          "description": "The template status",
          "enum": ["working", "waiting", "done"],
          "example": "done",
          "type": "string"
        }
      },
      "required": ["name", "note", "status"],
      "type": "object"
    },
    "TemplatePut": {
      "properties": {
        "name": {
          "example": "fooo",
          "type": "string"
        },
        "note": {
          "example": "bar",
          "type": "string"
        },
        "status": {
          "description": "The template status",
          "enum": ["working", "waiting", "done"],
          "example": "done",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TemplateRead": {
      "example": {
        "create_date": "2017-12-24T00:00:00.000Z",
        "id": 23,
        "name": "Make the FOSDEM presentation",
        "note": "password",
        "status": "working"
      },
      "properties": {
        "create_date": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "status": {
          "description": "The template status",
          "enum": ["working", "waiting", "done"],
          "type": "string"
        }
      },
      "required": ["id", "name", "note", "status", "create_date"],
      "type": "object"
    },
    "Templates": {
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": ["name"],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "keycloak": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "security": [
    {
      "keycloak": []
    }
  ],
  "tags": [
    {
      "description": "Everything about your Templates!s",
      "name": "templates"
    }
  ],
  "externalDocs": {
    "description": "Find out more",
    "url": "http://wiki.assona.net"
  },
  "x-components": {
    "parameters": {
      "limitParam": {
        "description": "The numbers of items to return.",
        "in": "query",
        "maximum": 50,
        "minimum": 1,
        "name": "limit",
        "required": false,
        "type": "integer"
      },
      "offsetParam": {
        "description": "The number of items to skip before starting to collect the result set.",
        "in": "query",
        "minimum": 0,
        "name": "offset",
        "required": false,
        "type": "integer"
      },
      "templateId": {
        "description": "The template identifier",
        "in": "path",
        "name": "id",
        "required": true,
        "type": "number"
      }
    },
    "responses": {
      "GeneralError": {
        "description": "General Error Response",
        "schema": {
          "$ref": "#/definitions/Error"
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "schema": {
          "$ref": "#/definitions/Error"
        }
      },
      "TemplateResponse": {
        "description": "successful operation",
        "schema": {
          "$ref": "#/definitions/TemplateRead"
        }
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "description": "Unauthorized"
      }
    }
  }
}
