import {ResponseObject, RequestBodyObject} from 'openapi3-ts';

export const contractSchema = {
  type: 'object',
  properties: {
    price: {type: 'string', required: true},
    vendor: {type: 'string'},
    type: {type: 'string', enum: ['bike', 'twike', 'dreik'], default: 'bike'},
    done: {type: 'string'},
  },
};

export const validationErrorSchema = {
  type: 'object',
  description: 'Schema Validation failed',
  properties: {
    error: {
      type: 'object',
      properties: {
        statusCode: {
          type: 'integer',
          default: 0,
          example: 422,
        },
        name: {
          type: 'string',
          example: 'UnprocessableEntityError',
        },
        message: {
          type: 'string',
          example:
            'The request body is invalid. See error object `details` property for more info.',
        },
        code: {
          type: 'string',
          example: 'VALIDATION_FAILED',
        },
        details: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              path: {
                type: 'string',
                example: '/properties/vendor',
              },
              code: {
                type: 'string',
                example: 'required',
              },
              message: {
                type: 'string',
                example: "should have required property 'vendor'",
              },
              info: {
                type: 'object',
                properties: {
                  missingProperty: {
                    type: 'string',
                    example: 'vendor',
                  },
                },
              },
            },
          },
        },
      },
    },
  },
};

export const genericErrorSchema = {
  type: 'object',
  description: 'An error occured',
  properties: {
    type: {
      type: 'string',
      format: 'uri',
      description:
        'An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n',
      default: 'about:blank',
      example: 'https://assona.io/problem/constraint-violation',
    },
    title: {
      type: 'string',
      description:
        'A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n',
      example: 'An error occured',
    },
    status: {
      type: 'integer',
      format: 'int32',
      description:
        'The HTTP status code generated by the origin server for this occurrence\nof the problem.\n',
      minimum: 100,
      maximum: 600,
      exclusiveMaximum: true,
      example: 503,
    },
    detail: {
      type: 'string',
      description: 'A human readable explanation specific to this occurrence of the\nproblem.\n',
      example: 'Connection to database timed out',
    },
    instance: {
      type: 'string',
      format: 'uri',
      description:
        'An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.\n',
      example: 'https://wiki.assona.io/?search=genericError',
    },
  },
};

export const VALIDATION_ERROR_RESPONSE: ResponseObject = {
  description: 'Error Response',
  content: {
    'application/problem+json': {
      schema: validationErrorSchema,
    },
  },
};

export const GENERIC_ERROR_RESPONSE: ResponseObject = {
  description: 'Error Response',
  content: {
    'application/problem+json': {
      schema: genericErrorSchema,
    },
  },
};

export const CONTRACT_REQUEST: RequestBodyObject = {
  description: 'Request Schema',
  content: {
    'application/json': {
      schema: genericErrorSchema,
    },
  },
};
/*
export const sampleErrors = [
  {
    statusCode: 400,
    name: 'BadRequestError',
    message: 'Request body is required',
    code: 'MISSING_REQUIRED_PARAMETER',
  },
  {
    statusCode: 422,
    name: 'ValidationError',
    message:
      'The `Contract` instance is not valid. Details: `test` is not defined in the model (value: undefined).',
    details: {
      context: 'Contract',
      codes: {
        test: ['unknown-property'],
      },
      messages: {
        test: ['is not defined in the model'],
      },
    },
  },
  {
    statusCode: 400,
    name: 'SyntaxError',
    message: 'Unexpected token a in JSON at position 1',
  },
  {
    error: {
      statusCode: 422,
      name: 'UnprocessableEntityError',
      message: 'The request body is invalid. See error object `details` property for more info.',
      code: 'VALIDATION_FAILED',
      details: [
        {
          path: '',
          code: 'required',
          message: "should have required property 'vendor'",
          info: {
            missingProperty: 'vendor',
          },
        },
        {
          path: '',
          code: 'required',
          message: "should have required property 'type'",
          info: {
            missingProperty: 'type',
          },
        },
      ],
    },
  },
];
*/
