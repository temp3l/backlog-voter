openapi: "3.0.0"
info:
  description: "This is a sample Assonajs server.  You can find out more about     Swagger at [http://assona.io/wiki](http://assona.io/wiki)"
  title: Templates API
  version: "0.0.1"
  contact:
    email: srebien@assona.net
servers:
  - url: "http://localhost:3003"
security:
  - keycloak: [] # globally activated
tags:
- name: "templates"
  description: "Everything about your Templates!s"

externalDocs:
  description: "Find out more"
  url: "http://wiki.assona.net"


paths:
  /templates:
    get:
      x-controller: templates
      x-operation: findAll
      operationId: listTemplates
      summary: Get a list of templates
      tags: ["templates"]
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: Get a list of templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TemplateRead"
        "default":
          $ref: "#/components/responses/GeneralError"
    post:
      x-controller: templates
      x-operation: create
      operationId: createTemplate
      tags: [ "templates" ]
      summary: Create a templateId
      description: "create a new template"
      responses:
        "201":
          description: created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateRead"
        "405":
          description: Invalid input
        "default":
          $ref: "#/components/responses/GeneralError"
          
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplatePost"
  '/test/{id}':
    put:
      x-controller: templates
      x-operation: update
      tags: ["templates"]
      summary: Update the template
      description: "Update the template title and status"
      operationId: updateTemplate
      parameters:
        - $ref: "#/components/parameters/templateId"
      responses:
        "200":
          $ref: "#/components/responses/TemplateResponse"
        "404":
          $ref: "#/components/responses/NotFound"
        "default":
          $ref: "#/components/responses/GeneralError"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplatePut"
    delete:
      x-controller: templates
      x-operation: delete
      operationId: deleteTemplate
      tags: [ "templates" ]
      summary: Delete the template
      description: "Delete the template"
      parameters:
        - $ref: "#/components/parameters/templateId"
      responses:
        "200":
          description: "deleted successfullllly"
        "404":
          description: "The todo does not exist."

components:
         
  schemas:
    Templates:
        type: object
        properties:
          name:
            type: string
        required: 
          - name

    TemplateRead:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
        note:
          type: string
        create_date: 
          type: string
          readOnly: true
        status:
          description: The template status
          type: string
          enum:
            - working
            - waiting
            - done
      example:
        id: 23
        name: Make the FOSDEM presentation
        note: password
        status: working
        create_date: "2017-12-24T00:00:00.000Z"
      required:
          - id
          - name
          - note
          - status
          - create_date
    TemplatePost:
      type: object
      properties:
        name:
          type: string
          example: "fooo"
        note:
          type: string
          example: "bar"
        status:
          description: The template status
          type: string
          example: "done"
          enum:
            - working
            - waiting
            - done
      required:
          - name
          - note
          - status
    TemplatePut:
      type: object
      properties:
        name:
          type: string
          example: "fooo"
        note:
          type: string
          example: "bar"
        status:
          description: The template status
          type: string
          example: "done"
          enum:
            - working
            - waiting
            - done
    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
      required:
        - code
        - message
  
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        minimum: 0
    limitParam:
      in: query
      name: limit
      required: false
      description: The numbers of items to return.
      schema:
        type: integer
        minimum: 1
        maximum: 50
    templateId:
      name: id
      in: path
      description: The template identifier
      required: true
      schema:
        type: number

  responses:
    TemplateResponse: 
      description: successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TemplateRead"
    GeneralError:
      description: General Error Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error" 

  securitySchemes:
    keycloak:
      type: http
      scheme: bearer
      bearerFormat: JWT
      # https://github.com/swagger-api/swagger-ui/issues/2915
      # onComplete: () =>  ui.preauthorizeApiKey("keycloak", token)

