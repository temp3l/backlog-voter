openapi: 3.0.0
info:
  version: 1.0.0
  description: https://wiki.assona.net/display/ASITA/document-manager-service
  title: document-manager-service
  contact:
    name: API Support
    url: https://assona.net
    email: agile-pioneers-dev@assona.net
  license:
    name: MIT
servers:
  - url: https://development.assona.io/private/v1/document-management
  - url: http://localhost:8094/private/v1/document-management
tags:
  - name: Document Keys
    description: Document Key Controller
  - name: Labels
    description: Label Stuff
  - name: Templates
    description: Template Stuff
  - name: ValueSets
    description: regarding ValueSets
paths:
  /documentkeys:
    get:
      tags:
        - Document Keys
      summary: getDocumentKeys
      operationId: getDocumentKeysUsingGET
      responses:
        200:
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentKeyResource"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
    post:
      tags:
        - Document Keys
      summary: documentKeyCreate
      operationId: documentKeyCreateUsingPOST
      requestBody:
        $ref: "#/components/requestBodies/DocumentKeyResource"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                type: string
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}:
    get:
      tags:
        - Document Keys
      summary: getDocumentKey
      operationId: getDocumentKeyUsingGET
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/DocumentKeyResource"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
    put:
      tags:
        - Document Keys
      summary: documentKeyEdit
      operationId: documentKeyEditUsingPUT
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
      requestBody:
        $ref: "#/components/requestBodies/DocumentKeyResource"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                type: string
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
    delete:
      tags:
        - Document Keys
      summary: deleteDocumentKey
      operationId: deleteDocumentKeyUsingDELETE
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                type: string
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates:
    get:
      tags: ["Templates"]
      summary: getTemplates
      operationId: getTemplatesUsingGET
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
      responses:
        200:
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TemplateResponseResource"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
    post:
      tags: ["Templates"]
      summary: uploadTemplate
      operationId: uploadTemplateUsingPOST
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/TemplateUploadResource"
        description: resource
        required: true
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                type: string
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates/active-template:
    get:
      tags: ["Templates"]
      summary: getCurrentTemplate
      operationId: getCurrentTemplateUsingGET
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TemplateResponseResource"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates/{templateId}: # single template
    delete:
      tags: ["Templates"]
      summary: deleteTemplate
      operationId: deleteTemplateUsingDELETE
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates/{templateId}/change-expiry:
    post:
      tags: ["Templates"]
      summary: changeTemplateExpiry
      operationId: changeTemplateExpiryUsingPOST
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateChangeExpiryResource"
        description: changeExpiryResource
        required: true
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates/{templateId}/edit:
    post:
      tags: ["Templates"]
      summary: editTemplate
      operationId: editTemplateUsingPOST
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateEditResource"
        description: resource
        required: true
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates/{templateId}/publish:
    post:
      tags: ["Templates"]
      summary: publishTemplate
      operationId: publishTemplateUsingPOST
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplatePublishResource"
        description: publishResource
        required: true
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates/{templateId}/unpublish:
    post:
      tags: ["Templates"]
      summary: unpublishTemplate
      operationId: unpublishTemplateUsingPOST
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates/{templateId}/valuesets:
    get:
      tags: ["ValueSets"]
      summary: listValueSets
      operationId: listValueSetsUsingGET
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValueSetResource"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
    post:
      tags: ["ValueSets"]
      summary: createValueSet
      operationId: createValueSetUsingPOST
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetResource"
        description: valueSet
        required: true
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ValueSetResource"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /documentkeys/{documentKey}/templates/{templateId}/valuesets/{valueSetId}:
    get:
      tags: ["ValueSets"]
      summary: getValueSet
      operationId: getValueSetUsingGET
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
        - $ref: "#/components/parameters/valueSetIdParam"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ValueSetResource"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
    put:
      tags: ["ValueSets"]
      summary: updateValueSet
      operationId: updateValueSetUsingPUT
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
        - $ref: "#/components/parameters/valueSetIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValueSetResource"
        description: changeValueSet
        required: true
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
    delete:
      tags: ["ValueSets"]
      summary: deleteValueSet
      operationId: deleteValueSetUsingDELETE
      parameters:
        - $ref: "#/components/parameters/documentKeyParam"
        - $ref: "#/components/parameters/templateIdParam"
        - $ref: "#/components/parameters/valueSetIdParam"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /labels:
    get:
      tags:
        - Labels
      summary: listAllLabels
      operationId: listAllLabelsUsingGET
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  type: string
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /labels/{substring}:
    get:
      tags: ["Labels"]
      summary: listFilteredLabels
      operationId: listFilteredLabelsUsingGET
      parameters:
        - $ref: "#/components/parameters/substringParam"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  type: string
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false
  /templates/{templateId}: # single template
    get:
      tags:
        - Templates
      summary: getTemplate
      operationId: getTemplateUsingGET
      parameters:
        - $ref: "#/components/parameters/templateIdParam"
      responses:
        200:
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TemplateResponseResource"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401AuthError"
        404:
          $ref: "#/components/responses/404NotFound"
        default:
          $ref: "#/components/responses/GenericError"
      deprecated: false

components:
  parameters:
    substringParam:
      name: substring
      in: path
      description: substring
      required: true
      schema:
        type: string
        example: ASD
    templateIdParam:
      name: templateId
      in: path
      description: templateId
      required: true
      schema:
        type: string
        format: uuid
        example: 747075d0-b2aa-11e9-a2a3-2a2ae2dbcce4
    valueSetIdParam:
      name: valueSetId
      in: path
      description: valueSetId
      required: true
      schema:
        type: integer
        format: int64
    documentKeyParam:
      name: documentKey
      in: path
      description: documentKeyIdParam
      required: true
      schema:
        type: string
        example: MSB_REPORT_COVER_LETTER
  requestBodies:
    DocumentKeyResource:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DocumentKeyResource"
      description: documentKeyResource
      required: true
  responses:
    400BadRequest: # Can be referenced as '#/components/responses/400BadRequest'
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorModel"
    401AuthError: # Can be referenced as '#/components/responses/401AuthError'
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorModel"
    404NotFound: # Can be referenced as '#/components/responses/404NotFound'
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorModel"
    GenericError: # Can be referenced as '#/components/responses/GenericError'
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorModel"
  schemas:
    ApiErrorModel:
      title: ApiErrorModel
      type: object
      properties:
        errorCode:
          type: string
        errorLink:
          type: string
        exception:
          type: string
        exceptionMessage:
          type: string
        httpStatus:
          type: integer
          format: int32
        httpStatusText:
          type: string
    DocumentKeyResource:
      type: object
      required: ["displayName", "labels", "name", "note", "sourceType", "state", "targetType"]
      properties:
        createdAt:
          type: string
          format: date
        displayName:
          type: string
        labels:
          type: array
          items:
            type: string
        name:
          type: string
        note:
          type: string
        sourceType:
          type: string
          enum:
            - HTML
            - TEXT
        state:
          type: string
          enum:
            - NEW
            - ACTIVE
            - EXPIRED
            - SCHEDULED
            - DRAFT
            - UNKNOWN
        targetType:
          type: string
          enum:
            - HTML
            - TEXT
            - PDF
      title: DocumentKeyResource
    ParameterSetResource:
      type: object
      required: ["content", "name", "template", "uploadDate"]
      properties:
        content:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        template:
          type: string
          format: uuid
        uploadDate:
          type: string
          format: date-time
      title: ParameterSetResource
    TemplateChangeExpiryResource:
      type: object
      required: ["expiryDate"]
      properties:
        expiryDate:
          type: string
          format: date
      title: TemplateChangeExpiryResource
    TemplateEditResource:
      type: object
      required: ["comment", "jiraIssue", "parameterSetContent", "parameterSetName"]
      properties:
        comment:
          type: string
        jiraIssue:
          type: string
        parameterSetContent:
          type: string
        parameterSetName:
          type: string
      title: TemplateEditResource
    TemplatePublishResource:
      type: object
      required: ["expiryDate", "publishDate"]
      properties:
        expiryDate:
          type: string
          format: date
        publishDate:
          type: string
          format: date
      title: TemplatePublishResource
    TemplateResponseResource:
      type: object
      required: ["author", "comment", "documentKey", "expiryDate", "jiraTicket", "parameterSet", "publishDate", "status", "uploadDate"]
      properties:
        author:
          type: string
        comment:
          type: string
        documentKey:
          $ref: "#/components/schemas/DocumentKeyResource"
        expiryDate:
          type: string
          format: date-time
        id:
          type: string
        jiraticket:
          type: string
        parameterSet:
          $ref: "#/components/schemas/ParameterSetResource"
        publishDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - EXPIRED
            - SCHEDULED
            - DRAFT
        uploadDate:
          type: string
          format: date-time
      title: TemplateResponseResource
    TemplateUploadResource:
      type: object
      required: ["author", "comment", "contentType", "jiraTicket", "parameterSetContent", "parameterSetName", "templateData"]
      properties:
        author:
          type: string
        comment:
          type: string
        contentType:
          type: string
        jiraTicket:
          type: string
        parameterSetContent:
          type: string
        parameterSetName:
          type: string
        templateData:
          type: string
          format: byte
      title: TemplateUploadResource
    ValueSetResource:
      type: object
      required: ["content", "name"]
      properties:
        content:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
      title: ValueSetResource
  securitySchemes:
    BearerAuth: # Bearer authentication is applied globally to the whole API
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
security:
  - BearerAuth: [] # use the same name as above
